{
  "address": "0xeD12B05E082bBe97CeeB9aa97Af13763B3bB2B8b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "basescanCheckAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientContractBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VerificationNotChecked",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "CheckRequestFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "CheckRequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "checkVerification",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isContractChecked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7c5bb1c6ee37486eb3b2bf4123723b1235c5fb0b36f78dd9eed5994de857dd0e",
  "receipt": {
    "to": null,
    "from": "0x8488B81757074B0558ebB05D59A81F43F55bf0C8",
    "contractAddress": "0xeD12B05E082bBe97CeeB9aa97Af13763B3bB2B8b",
    "transactionIndex": 9,
    "gasUsed": "2285235",
    "logsBloom": "0x
    "blockHash": "0x9016a181772b9ddd2afdf68880d57ea71829df06ad0e951e965a7bf6d0885a76",
    "transactionHash": "0x7c5bb1c6ee37486eb3b2bf4123723b1235c5fb0b36f78dd9eed5994de857dd0e",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 15702362,
        "transactionHash": "0x7c5bb1c6ee37486eb3b2bf4123723b1235c5fb0b36f78dd9eed5994de857dd0e",
        "address": "0xeD12B05E082bBe97CeeB9aa97Af13763B3bB2B8b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008488b81757074b0558ebb05d59a81f43f55bf0c8"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x9016a181772b9ddd2afdf68880d57ea71829df06ad0e951e965a7bf6d0885a76"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 15702362,
        "transactionHash": "0x7c5bb1c6ee37486eb3b2bf4123723b1235c5fb0b36f78dd9eed5994de857dd0e",
        "address": "0xeD12B05E082bBe97CeeB9aa97Af13763B3bB2B8b",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008488b81757074b0558ebb05d59a81f43f55bf0c8"
        ],
        "data": "0x00000000000000000000000000000000000000000000d3c21bcecceda1000000",
        "logIndex": 19,
        "blockHash": "0x9016a181772b9ddd2afdf68880d57ea71829df06ad0e951e965a7bf6d0885a76"
      }
    ],
    "blockNumber": 15702362,
    "cumulativeGasUsed": "3746514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x165cd00a304D16030009047831Bad9D723FE5b69"
  ],
  "numDeployments": 27,
  "solcInputHash": "4f3383a8c41dcb5ab682ca19290ae007",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"basescanCheckAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientContractBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VerificationNotChecked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"CheckRequestFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"CheckRequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"checkVerification\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isContractChecked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ERC20 token with burnable, ownable, and reentrancy guard features.Integrated with BasescanCheck for contract verification check.\",\"errors\":{\"InsufficientContractBalance()\":[{\"details\":\"Custom error when the contract balance is insufficient for verification requests\"}],\"VerificationNotChecked()\":[{\"details\":\"Custom error when a contract is attempted to be used before verification\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"CheckRequestFailed(address,string)\":{\"params\":{\"contractAddress\":\"The address of the contract for which the request failed\",\"errorMessage\":\"Error message describing why the request failed\"}},\"CheckRequestSent(address)\":{\"params\":{\"contractAddress\":\"The address of the contract to be checked\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to approve for spending\",\"spender\":\"The address to which tokens are allowed to be spent\"},\"returns\":{\"_0\":\"bool indicating success or failure\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"checkVerification(address)\":{\"details\":\"This function sends a request to the BasescanCheck contract via the IBasescanCheck interface. It checks whether the contract has enough Ether balance (>= 0.002 ether) to pay for the request. If the request succeeds, the contract address is marked as checked, and an event is emitted. In case of failure, it emits an event with the error message.  Requirements: - The contract must have at least 0.002 ether in balance to cover the request. - The function is protected against reentrancy using the `nonReentrant` modifier.  Emits: - `CheckRequestSent` if the verification request is successfully sent. - `CheckRequestFailed` if the verification request fails, along with the error message. \",\"params\":{\"contractAddress\":\"The address of the contract to verify.\"}},\"constructor\":{\"details\":\"The constructor initializes the ERC20 token with the name \\\"Scam Hunter Token\\\" and symbol \\\"SHT\\\". It also sets the deployer as the owner of the contract by calling the Ownable constructor, and initializes the  BasescanCheck contract address for performing contract verification checks. \",\"params\":{\"basescanCheckAddress\":\"The address of the BasescanCheck contract used for verification requests.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"params\":{\"receiver\":\"The address to send the Ether to\"}}},\"stateVariables\":{\"basescanCheck\":{\"details\":\"Chainlink-based contract for AI-driven verification requests\"},\"isContractChecked\":{\"details\":\"Mapping to track whether a contract verification has been checked or not\"}},\"title\":\"ScamHunterToken\",\"version\":1},\"userdoc\":{\"events\":{\"CheckRequestFailed(address,string)\":{\"notice\":\"Emitted when a verification request fails\"},\"CheckRequestSent(address)\":{\"notice\":\"Emitted when a request to check a contract verification is sent\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approves an allowance for a spender, only if the contract verification is checked.  After verification check, it's up to the user to approve even though the contract is not a verified on Basescan.\"},\"checkVerification(address)\":{\"notice\":\"Checks a given smart contract verification on Basescan using BasescanCheck by sending a verification request.\"},\"constructor\":{\"notice\":\"Constructor to deploy the ScamHunterToken contract.\"},\"withdraw(address)\":{\"notice\":\"Allows the contract owner to withdraw the contract's Ether balance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ScamHunterToken.sol\":\"ScamHunterToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ScamHunterToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ERC20Burnable } from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IBasescanCheck } from \\\"./interfaces/IBasescanCheck.sol\\\";\\n\\n/**\\n * @title ScamHunterToken\\n * @dev ERC20 token with burnable, ownable, and reentrancy guard features.Integrated with BasescanCheck for contract verification check.\\n */\\ncontract ScamHunterToken is ERC20, ERC20Burnable, Ownable, ReentrancyGuard {\\n\\t/// @dev Chainlink-based contract for AI-driven verification requests\\n\\tIBasescanCheck private basescanCheck;\\n\\n\\t///////////////////////////////////////MAPPING////////////////////////////////////////////////\\n\\n\\t/// @dev Mapping to track whether a contract verification has been checked or not\\n\\tmapping(address => bool) public isContractChecked;\\n\\n\\t///////////////////////////////////////EVENTS///////////////////////////////////////////////////\\n\\n\\t/// @notice Emitted when a request to check a contract verification is sent\\n\\t/// @param contractAddress The address of the contract to be checked\\n\\tevent CheckRequestSent(address contractAddress);\\n\\n\\t/// @notice Emitted when a verification request fails\\n\\t/// @param contractAddress The address of the contract for which the request failed\\n\\t/// @param errorMessage Error message describing why the request failed\\n\\tevent CheckRequestFailed(address contractAddress, string errorMessage);\\n\\n\\t/////////////////////////////////////CUSTOM ERRORS///////////////////////////////////////////////\\n\\n\\t/// @dev Custom error when the contract balance is insufficient for verification requests\\n\\terror InsufficientContractBalance();\\n\\n\\t/// @dev Custom error when a contract is attempted to be used before verification\\n\\terror VerificationNotChecked();\\n\\n\\t////////////////////////////////////////CONSTRUCTOR/////////////////////////////////////////////////\\n\\n\\t/**\\n * @notice Constructor to deploy the ScamHunterToken contract.\\n * @dev The constructor initializes the ERC20 token with the name \\\"Scam Hunter Token\\\" and symbol \\\"SHT\\\".\\n * It also sets the deployer as the owner of the contract by calling the Ownable constructor, and initializes the \\n * BasescanCheck contract address for performing contract verification checks.\\n * \\n * @param basescanCheckAddress The address of the BasescanCheck contract used for verification requests.\\n */\\nconstructor(address basescanCheckAddress) payable ERC20(\\\"Scam Hunter Token\\\", \\\"SHT\\\") Ownable() {\\n    _mint(msg.sender, 1_000_000 * (10 ** 18));  // Mint 1,000,000 tokens to the deployer\\n    basescanCheck = IBasescanCheck(basescanCheckAddress);\\n}\\n\\n\\t/////////////////////////////////////////FUNCTIONS/////////////////////////////////////////////////////\\n\\n\\t/**\\n\\t * @notice Approves an allowance for a spender, only if the contract verification is checked. \\n\\t * After verification check, it's up to the user to approve even though the contract is not a verified on Basescan.\\n\\t * @param spender The address to which tokens are allowed to be spent\\n\\t * @param amount The number of tokens to approve for spending\\n\\t * @return bool indicating success or failure\\n\\t */\\n\\tfunction approve(address spender,uint256 amount) public override returns (bool) {\\n\\t\\trequire(isContractChecked[spender], VerificationNotChecked());\\n\\t\\treturn super.approve(spender, amount);\\n\\t}\\n\\n\\n/**\\n * @notice Checks a given smart contract verification on Basescan using BasescanCheck by sending a verification request.\\n * @dev This function sends a request to the BasescanCheck contract via the IBasescanCheck interface.\\n * It checks whether the contract has enough Ether balance (>= 0.002 ether) to pay for the request.\\n * If the request succeeds, the contract address is marked as checked, and an event is emitted.\\n * In case of failure, it emits an event with the error message.\\n * \\n * Requirements:\\n * - The contract must have at least 0.002 ether in balance to cover the request.\\n * - The function is protected against reentrancy using the `nonReentrant` modifier.\\n * \\n * Emits:\\n * - `CheckRequestSent` if the verification request is successfully sent.\\n * - `CheckRequestFailed` if the verification request fails, along with the error message.\\n * \\n * @param contractAddress The address of the contract to verify.\\n */\\nfunction checkVerification(address contractAddress) public payable nonReentrant {\\n    require(address(this).balance >= 0.002 ether, InsufficientContractBalance());\\n\\n    string memory contractAddressString = addressToString(contractAddress);\\n\\n    try basescanCheck.sendRequest{ value: 0.002 ether }(contractAddressString) {    \\n        isContractChecked[contractAddress] = true;\\n        emit CheckRequestSent(contractAddress);\\n    } catch Error(string memory reason) {\\n        emit CheckRequestFailed(contractAddress, reason);\\n    }\\n}\\n\\n\\t/**\\n\\t * @notice Converts an address to its string representation in hexadecimal format \\n\\t * to be passed in sendRequest function on BasescanCheck contract which requires\\n\\t * a string.   \\n\\t * @param addr The address to convert\\n\\t * @return string representation of the address\\n\\t */\\n\\tfunction addressToString(address addr) internal pure returns (string memory) {\\n\\t\\tbytes32 value = bytes32(uint256(uint160(addr)));\\n\\t\\tbytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\t\\tbytes memory str = new bytes(42);\\n\\t\\tstr[0] = \\\"0\\\";\\n\\t\\tstr[1] = \\\"x\\\";\\n\\t\\tfor (uint256 i = 0; i < 20; i++) {\\n\\t\\t\\tstr[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n\\t\\t\\tstr[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n\\t\\t}\\n\\t\\treturn string(str);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows the contract owner to withdraw the contract's Ether balance\\n\\t * @param receiver The address to send the Ether to\\n\\t */\\n\\tfunction withdraw(address receiver) external onlyOwner {\\n\\t\\t(bool success, ) = payable(receiver).call{value: address(this).balance}(\\\"\\\");\\n\\t\\trequire(success, \\\"Withdraw failed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Fallback function to receive Ether\\n\\t */\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0x64e6e288a46a0c790eb5e4ad83acbb1cf60715b09ea603e50d2b3cbce60830fc\",\"license\":\"MIT\"},\"contracts/interfaces/IBasescanCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.27;\\n\\ninterface IBasescanCheck {\\n\\t// Getter functions ((public variables)\\n\\tfunction javascript() external view returns (string memory);\\n\\n\\tfunction lastRequestId() external view returns (bytes32);\\n\\n\\tfunction lastResponse() external view returns (string memory);\\n\\n\\tfunction lastError() external view returns (string memory);\\n\\n\\tfunction lastUserPrompt() external view returns (string memory);\\n\\n\\tfunction subscriptionId() external view returns (uint64);\\n\\n\\tfunction gasLimit() external view returns (uint32);\\n\\n\\tfunction donId() external view returns (bytes32);\\n\\n\\tfunction donHostedSecretsVersion() external view returns (uint64);\\n\\n\\t// Function to send request\\n\\tfunction sendRequest(\\n\\t\\tstring memory userPrompt\\n\\t) external payable returns (bytes32);\\n\\n\\t// Events\\n\\tevent Javascript(string javascript);\\n\\tevent Request(bytes32 indexed requestId, string request);\\n\\tevent Response(bytes32 indexed requestId, string response, string err);\\n\\n\\t// Errors\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n}\\n\",\"keccak256\":\"0x4f751904763daebe8cfe72236ddd82807f35f67062c1e5be77abae8fe97f0407\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051612d54380380612d54833981810160405281019061002591906103d5565b6040518060400160405280601181526020017f5363616d2048756e74657220546f6b656e0000000000000000000000000000008152506040518060400160405280600381526020017f534854000000000000000000000000000000000000000000000000000000000081525081600390816100a09190610652565b5080600490816100b09190610652565b5050506100cf6100c461013860201b60201c565b61014060201b60201c565b60016006819055506100f13369d3c21bcecceda100000061020660201b60201c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061082e565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c90610781565b60405180910390fd5b6102876000838361036860201b60201c565b806002600082825461029991906107d0565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161034a9190610813565b60405180910390a36103646000838361036d60201b60201c565b5050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a282610377565b9050919050565b6103b281610397565b81146103bd57600080fd5b50565b6000815190506103cf816103a9565b92915050565b6000602082840312156103eb576103ea610372565b5b60006103f9848285016103c0565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061048357607f821691505b6020821081036104965761049561043c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826104c1565b61050886836104c1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061054f61054a61054584610520565b61052a565b610520565b9050919050565b6000819050919050565b61056983610534565b61057d61057582610556565b8484546104ce565b825550505050565b600090565b610592610585565b61059d818484610560565b505050565b5b818110156105c1576105b660008261058a565b6001810190506105a3565b5050565b601f821115610606576105d78161049c565b6105e0846104b1565b810160208510156105ef578190505b6106036105fb856104b1565b8301826105a2565b50505b505050565b600082821c905092915050565b60006106296000198460080261060b565b1980831691505092915050565b60006106428383610618565b9150826002028217905092915050565b61065b82610402565b67ffffffffffffffff8111156106745761067361040d565b5b61067e825461046b565b6106898282856105c5565b600060209050601f8311600181146106bc57600084156106aa578287015190505b6106b48582610636565b86555061071c565b601f1984166106ca8661049c565b60005b828110156106f2578489015182556001820191506020850194506020810190506106cd565b8683101561070f578489015161070b601f891682610618565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061076b601f83610724565b915061077682610735565b602082019050919050565b6000602082019050818103600083015261079a8161075e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107db82610520565b91506107e683610520565b92508282019050808211156107fe576107fd6107a1565b5b92915050565b61080d81610520565b82525050565b60006020820190506108286000830184610804565b92915050565b6125178061083d6000396000f3fe6080604052600436106101185760003560e01c806370a08231116100a0578063a457c2d711610064578063a457c2d7146103be578063a9059cbb146103fb578063baab979714610438578063dd62ed3e14610454578063f2fde38b146104915761011f565b806370a08231146102eb578063715018a61461032857806379cc67901461033f5780638da5cb5b1461036857806395d89b41146103935761011f565b8063313ce567116100e7578063313ce567146101f4578063395093511461021f57806342966c681461025c57806351cff8d914610285578063631da17f146102ae5761011f565b806306fdde0314610124578063095ea7b31461014f57806318160ddd1461018c57806323b872dd146101b75761011f565b3661011f57005b600080fd5b34801561013057600080fd5b506101396104ba565b6040516101469190611830565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906118f5565b61054c565b6040516101839190611950565b60405180910390f35b34801561019857600080fd5b506101a16105e3565b6040516101ae919061197a565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190611995565b6105ed565b6040516101eb9190611950565b60405180910390f35b34801561020057600080fd5b5061020961061c565b6040516102169190611a04565b60405180910390f35b34801561022b57600080fd5b50610246600480360381019061024191906118f5565b610625565b6040516102539190611950565b60405180910390f35b34801561026857600080fd5b50610283600480360381019061027e9190611a1f565b61065c565b005b34801561029157600080fd5b506102ac60048036038101906102a79190611a4c565b610670565b005b3480156102ba57600080fd5b506102d560048036038101906102d09190611a4c565b610728565b6040516102e29190611950565b60405180910390f35b3480156102f757600080fd5b50610312600480360381019061030d9190611a4c565b610748565b60405161031f919061197a565b60405180910390f35b34801561033457600080fd5b5061033d610790565b005b34801561034b57600080fd5b50610366600480360381019061036191906118f5565b6107a4565b005b34801561037457600080fd5b5061037d6107c4565b60405161038a9190611a88565b60405180910390f35b34801561039f57600080fd5b506103a86107ee565b6040516103b59190611830565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e091906118f5565b610880565b6040516103f29190611950565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d91906118f5565b6108f7565b60405161042f9190611950565b60405180910390f35b610452600480360381019061044d9190611a4c565b61091a565b005b34801561046057600080fd5b5061047b60048036038101906104769190611aa3565b610b27565b604051610488919061197a565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b39190611a4c565b610bae565b005b6060600380546104c990611b12565b80601f01602080910402602001604051908101604052809291908181526020018280546104f590611b12565b80156105425780601f1061051757610100808354040283529160200191610542565b820191906000526020600020905b81548152906001019060200180831161052557829003601f168201915b5050505050905090565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d1576040517ff732171100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105db8383610c31565b905092915050565b6000600254905090565b6000806105f8610c54565b9050610605858285610c5c565b610610858585610ce8565b60019150509392505050565b60006012905090565b600080610630610c54565b90506106518185856106428589610b27565b61064c9190611b72565b610f5e565b600191505092915050565b61066d610667610c54565b82611127565b50565b6106786112f4565b60008173ffffffffffffffffffffffffffffffffffffffff164760405161069e90611bd7565b60006040518083038185875af1925050503d80600081146106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b5050905080610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90611c38565b60405180910390fd5b5050565b60086020528060005260406000206000915054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107986112f4565b6107a26000611372565b565b6107b6826107b0610c54565b83610c5c565b6107c08282611127565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546107fd90611b12565b80601f016020809104026020016040519081016040528092919081815260200182805461082990611b12565b80156108765780601f1061084b57610100808354040283529160200191610876565b820191906000526020600020905b81548152906001019060200180831161085957829003601f168201915b5050505050905090565b60008061088b610c54565b905060006108998286610b27565b9050838110156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590611cca565b60405180910390fd5b6108eb8286868403610f5e565b60019250505092915050565b600080610902610c54565b905061090f818585610ce8565b600191505092915050565b610922611438565b66071afd498d0000471015610963576040517f786e0a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061096e82611487565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2adc1d966071afd498d0000836040518363ffffffff1660e01b81526004016109d39190611830565b60206040518083038185885af193505050508015610a0f57506040513d601f19601f82011682018060405250810190610a0c9190611d20565b60015b610a8a57610a1b611d5a565b806308c379a003610a795750610a2f611ddc565b80610a3a5750610a7b565b7fc69256ffbaa22d78a8a253362294e944786e7f3593f71458a3cce5a4789531428382604051610a6b929190611e6c565b60405180910390a150610a85565b505b3d6000803e3d6000fd5b610b1b565b506001600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9dffb7e47e8f22f8dc88789aa71c22d9a04e51dd1b25e844a8806b2fa2f2194b82604051610b129190611a88565b60405180910390a15b50610b2461178c565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610bb66112f4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90611f0e565b60405180910390fd5b610c2e81611372565b50565b600080610c3c610c54565b9050610c49818585610f5e565b600191505092915050565b600033905090565b6000610c688484610b27565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ce25781811015610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90611f7a565b60405180910390fd5b610ce18484848403610f5e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e9061200c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbd9061209e565b60405180910390fd5b610dd1838383611796565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4e90612130565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f45919061197a565b60405180910390a3610f5884848461179b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc4906121c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361103c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103390612254565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161111a919061197a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906122e6565b60405180910390fd5b6111a282600083611796565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121f90612378565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112db919061197a565b60405180910390a36112ef8360008461179b565b505050565b6112fc610c54565b73ffffffffffffffffffffffffffffffffffffffff1661131a6107c4565b73ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611367906123e4565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026006540361147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147490612450565b60405180910390fd5b6002600681905550565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff8111156114fe576114fd611d7c565b5b6040519080825280601f01601f1916602001820160405280156115305781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061156857611567612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106115cc576115cb612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b60148110156117805782600485600c846116189190611b72565b6020811061162957611628612470565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff168151811061166857611667612470565b5b602001015160f81c60f81b82600283611681919061249f565b600261168d9190611b72565b8151811061169e5761169d612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846116e19190611b72565b602081106116f2576116f1612470565b5b1a60f81b1660f81c60ff168151811061170e5761170d612470565b5b602001015160f81c60f81b82600283611727919061249f565b60036117339190611b72565b8151811061174457611743612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506115fe565b50809350505050919050565b6001600681905550565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117da5780820151818401526020810190506117bf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611802826117a0565b61180c81856117ab565b935061181c8185602086016117bc565b611825816117e6565b840191505092915050565b6000602082019050818103600083015261184a81846117f7565b905092915050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061188c82611861565b9050919050565b61189c81611881565b81146118a757600080fd5b50565b6000813590506118b981611893565b92915050565b6000819050919050565b6118d2816118bf565b81146118dd57600080fd5b50565b6000813590506118ef816118c9565b92915050565b6000806040838503121561190c5761190b61185c565b5b600061191a858286016118aa565b925050602061192b858286016118e0565b9150509250929050565b60008115159050919050565b61194a81611935565b82525050565b60006020820190506119656000830184611941565b92915050565b611974816118bf565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000806000606084860312156119ae576119ad61185c565b5b60006119bc868287016118aa565b93505060206119cd868287016118aa565b92505060406119de868287016118e0565b9150509250925092565b600060ff82169050919050565b6119fe816119e8565b82525050565b6000602082019050611a1960008301846119f5565b92915050565b600060208284031215611a3557611a3461185c565b5b6000611a43848285016118e0565b91505092915050565b600060208284031215611a6257611a6161185c565b5b6000611a70848285016118aa565b91505092915050565b611a8281611881565b82525050565b6000602082019050611a9d6000830184611a79565b92915050565b60008060408385031215611aba57611ab961185c565b5b6000611ac8858286016118aa565b9250506020611ad9858286016118aa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2a57607f821691505b602082108103611b3d57611b3c611ae3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b7d826118bf565b9150611b88836118bf565b9250828201905080821115611ba057611b9f611b43565b5b92915050565b600081905092915050565b50565b6000611bc1600083611ba6565b9150611bcc82611bb1565b600082019050919050565b6000611be282611bb4565b9150819050919050565b7f5769746864726177206661696c65640000000000000000000000000000000000600082015250565b6000611c22600f836117ab565b9150611c2d82611bec565b602082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611cb46025836117ab565b9150611cbf82611c58565b604082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b6000819050919050565b611cfd81611cea565b8114611d0857600080fd5b50565b600081519050611d1a81611cf4565b92915050565b600060208284031215611d3657611d3561185c565b5b6000611d4484828501611d0b565b91505092915050565b60008160e01c9050919050565b600060033d1115611d795760046000803e611d76600051611d4d565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611db4826117e6565b810181811067ffffffffffffffff82111715611dd357611dd2611d7c565b5b80604052505050565b600060443d10611e6957611dee611852565b60043d036004823e80513d602482011167ffffffffffffffff82111715611e16575050611e69565b808201805167ffffffffffffffff811115611e345750505050611e69565b80602083010160043d038501811115611e51575050505050611e69565b611e6082602001850186611dab565b82955050505050505b90565b6000604082019050611e816000830185611a79565b8181036020830152611e9381846117f7565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef86026836117ab565b9150611f0382611e9c565b604082019050919050565b60006020820190508181036000830152611f2781611eeb565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611f64601d836117ab565b9150611f6f82611f2e565b602082019050919050565b60006020820190508181036000830152611f9381611f57565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ff66025836117ab565b915061200182611f9a565b604082019050919050565b6000602082019050818103600083015261202581611fe9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006120886023836117ab565b91506120938261202c565b604082019050919050565b600060208201905081810360008301526120b78161207b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061211a6026836117ab565b9150612125826120be565b604082019050919050565b600060208201905081810360008301526121498161210d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006121ac6024836117ab565b91506121b782612150565b604082019050919050565b600060208201905081810360008301526121db8161219f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061223e6022836117ab565b9150612249826121e2565b604082019050919050565b6000602082019050818103600083015261226d81612231565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006122d06021836117ab565b91506122db82612274565b604082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006123626022836117ab565b915061236d82612306565b604082019050919050565b6000602082019050818103600083015261239181612355565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123ce6020836117ab565b91506123d982612398565b602082019050919050565b600060208201905081810360008301526123fd816123c1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061243a601f836117ab565b915061244582612404565b602082019050919050565b600060208201905081810360008301526124698161242d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006124aa826118bf565b91506124b5836118bf565b92508282026124c3816118bf565b915082820484148315176124da576124d9611b43565b5b509291505056fea264697066735822122035cfe22cb25e4d606a71b80b3c554d0eab047b60db49a605e348b8e2e54e618164736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436106101185760003560e01c806370a08231116100a0578063a457c2d711610064578063a457c2d7146103be578063a9059cbb146103fb578063baab979714610438578063dd62ed3e14610454578063f2fde38b146104915761011f565b806370a08231146102eb578063715018a61461032857806379cc67901461033f5780638da5cb5b1461036857806395d89b41146103935761011f565b8063313ce567116100e7578063313ce567146101f4578063395093511461021f57806342966c681461025c57806351cff8d914610285578063631da17f146102ae5761011f565b806306fdde0314610124578063095ea7b31461014f57806318160ddd1461018c57806323b872dd146101b75761011f565b3661011f57005b600080fd5b34801561013057600080fd5b506101396104ba565b6040516101469190611830565b60405180910390f35b34801561015b57600080fd5b50610176600480360381019061017191906118f5565b61054c565b6040516101839190611950565b60405180910390f35b34801561019857600080fd5b506101a16105e3565b6040516101ae919061197a565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190611995565b6105ed565b6040516101eb9190611950565b60405180910390f35b34801561020057600080fd5b5061020961061c565b6040516102169190611a04565b60405180910390f35b34801561022b57600080fd5b50610246600480360381019061024191906118f5565b610625565b6040516102539190611950565b60405180910390f35b34801561026857600080fd5b50610283600480360381019061027e9190611a1f565b61065c565b005b34801561029157600080fd5b506102ac60048036038101906102a79190611a4c565b610670565b005b3480156102ba57600080fd5b506102d560048036038101906102d09190611a4c565b610728565b6040516102e29190611950565b60405180910390f35b3480156102f757600080fd5b50610312600480360381019061030d9190611a4c565b610748565b60405161031f919061197a565b60405180910390f35b34801561033457600080fd5b5061033d610790565b005b34801561034b57600080fd5b50610366600480360381019061036191906118f5565b6107a4565b005b34801561037457600080fd5b5061037d6107c4565b60405161038a9190611a88565b60405180910390f35b34801561039f57600080fd5b506103a86107ee565b6040516103b59190611830565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e091906118f5565b610880565b6040516103f29190611950565b60405180910390f35b34801561040757600080fd5b50610422600480360381019061041d91906118f5565b6108f7565b60405161042f9190611950565b60405180910390f35b610452600480360381019061044d9190611a4c565b61091a565b005b34801561046057600080fd5b5061047b60048036038101906104769190611aa3565b610b27565b604051610488919061197a565b60405180910390f35b34801561049d57600080fd5b506104b860048036038101906104b39190611a4c565b610bae565b005b6060600380546104c990611b12565b80601f01602080910402602001604051908101604052809291908181526020018280546104f590611b12565b80156105425780601f1061051757610100808354040283529160200191610542565b820191906000526020600020905b81548152906001019060200180831161052557829003601f168201915b5050505050905090565b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d1576040517ff732171100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105db8383610c31565b905092915050565b6000600254905090565b6000806105f8610c54565b9050610605858285610c5c565b610610858585610ce8565b60019150509392505050565b60006012905090565b600080610630610c54565b90506106518185856106428589610b27565b61064c9190611b72565b610f5e565b600191505092915050565b61066d610667610c54565b82611127565b50565b6106786112f4565b60008173ffffffffffffffffffffffffffffffffffffffff164760405161069e90611bd7565b60006040518083038185875af1925050503d80600081146106db576040519150601f19603f3d011682016040523d82523d6000602084013e6106e0565b606091505b5050905080610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90611c38565b60405180910390fd5b5050565b60086020528060005260406000206000915054906101000a900460ff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107986112f4565b6107a26000611372565b565b6107b6826107b0610c54565b83610c5c565b6107c08282611127565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546107fd90611b12565b80601f016020809104026020016040519081016040528092919081815260200182805461082990611b12565b80156108765780601f1061084b57610100808354040283529160200191610876565b820191906000526020600020905b81548152906001019060200180831161085957829003601f168201915b5050505050905090565b60008061088b610c54565b905060006108998286610b27565b9050838110156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590611cca565b60405180910390fd5b6108eb8286868403610f5e565b60019250505092915050565b600080610902610c54565b905061090f818585610ce8565b600191505092915050565b610922611438565b66071afd498d0000471015610963576040517f786e0a9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061096e82611487565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b2adc1d966071afd498d0000836040518363ffffffff1660e01b81526004016109d39190611830565b60206040518083038185885af193505050508015610a0f57506040513d601f19601f82011682018060405250810190610a0c9190611d20565b60015b610a8a57610a1b611d5a565b806308c379a003610a795750610a2f611ddc565b80610a3a5750610a7b565b7fc69256ffbaa22d78a8a253362294e944786e7f3593f71458a3cce5a4789531428382604051610a6b929190611e6c565b60405180910390a150610a85565b505b3d6000803e3d6000fd5b610b1b565b506001600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9dffb7e47e8f22f8dc88789aa71c22d9a04e51dd1b25e844a8806b2fa2f2194b82604051610b129190611a88565b60405180910390a15b50610b2461178c565b50565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610bb66112f4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90611f0e565b60405180910390fd5b610c2e81611372565b50565b600080610c3c610c54565b9050610c49818585610f5e565b600191505092915050565b600033905090565b6000610c688484610b27565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ce25781811015610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90611f7a565b60405180910390fd5b610ce18484848403610f5e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4e9061200c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbd9061209e565b60405180910390fd5b610dd1838383611796565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4e90612130565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f45919061197a565b60405180910390a3610f5884848461179b565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc4906121c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361103c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103390612254565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161111a919061197a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906122e6565b60405180910390fd5b6111a282600083611796565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121f90612378565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112db919061197a565b60405180910390a36112ef8360008461179b565b505050565b6112fc610c54565b73ffffffffffffffffffffffffffffffffffffffff1661131a6107c4565b73ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611367906123e4565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026006540361147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147490612450565b60405180910390fd5b6002600681905550565b606060008273ffffffffffffffffffffffffffffffffffffffff1660001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff8111156114fe576114fd611d7c565b5b6040519080825280601f01601f1916602001820160405280156115305781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061156857611567612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106115cc576115cb612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b60148110156117805782600485600c846116189190611b72565b6020811061162957611628612470565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff168151811061166857611667612470565b5b602001015160f81c60f81b82600283611681919061249f565b600261168d9190611b72565b8151811061169e5761169d612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c846116e19190611b72565b602081106116f2576116f1612470565b5b1a60f81b1660f81c60ff168151811061170e5761170d612470565b5b602001015160f81c60f81b82600283611727919061249f565b60036117339190611b72565b8151811061174457611743612470565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506115fe565b50809350505050919050565b6001600681905550565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156117da5780820151818401526020810190506117bf565b60008484015250505050565b6000601f19601f8301169050919050565b6000611802826117a0565b61180c81856117ab565b935061181c8185602086016117bc565b611825816117e6565b840191505092915050565b6000602082019050818103600083015261184a81846117f7565b905092915050565b6000604051905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061188c82611861565b9050919050565b61189c81611881565b81146118a757600080fd5b50565b6000813590506118b981611893565b92915050565b6000819050919050565b6118d2816118bf565b81146118dd57600080fd5b50565b6000813590506118ef816118c9565b92915050565b6000806040838503121561190c5761190b61185c565b5b600061191a858286016118aa565b925050602061192b858286016118e0565b9150509250929050565b60008115159050919050565b61194a81611935565b82525050565b60006020820190506119656000830184611941565b92915050565b611974816118bf565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000806000606084860312156119ae576119ad61185c565b5b60006119bc868287016118aa565b93505060206119cd868287016118aa565b92505060406119de868287016118e0565b9150509250925092565b600060ff82169050919050565b6119fe816119e8565b82525050565b6000602082019050611a1960008301846119f5565b92915050565b600060208284031215611a3557611a3461185c565b5b6000611a43848285016118e0565b91505092915050565b600060208284031215611a6257611a6161185c565b5b6000611a70848285016118aa565b91505092915050565b611a8281611881565b82525050565b6000602082019050611a9d6000830184611a79565b92915050565b60008060408385031215611aba57611ab961185c565b5b6000611ac8858286016118aa565b9250506020611ad9858286016118aa565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611b2a57607f821691505b602082108103611b3d57611b3c611ae3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b7d826118bf565b9150611b88836118bf565b9250828201905080821115611ba057611b9f611b43565b5b92915050565b600081905092915050565b50565b6000611bc1600083611ba6565b9150611bcc82611bb1565b600082019050919050565b6000611be282611bb4565b9150819050919050565b7f5769746864726177206661696c65640000000000000000000000000000000000600082015250565b6000611c22600f836117ab565b9150611c2d82611bec565b602082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611cb46025836117ab565b9150611cbf82611c58565b604082019050919050565b60006020820190508181036000830152611ce381611ca7565b9050919050565b6000819050919050565b611cfd81611cea565b8114611d0857600080fd5b50565b600081519050611d1a81611cf4565b92915050565b600060208284031215611d3657611d3561185c565b5b6000611d4484828501611d0b565b91505092915050565b60008160e01c9050919050565b600060033d1115611d795760046000803e611d76600051611d4d565b90505b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611db4826117e6565b810181811067ffffffffffffffff82111715611dd357611dd2611d7c565b5b80604052505050565b600060443d10611e6957611dee611852565b60043d036004823e80513d602482011167ffffffffffffffff82111715611e16575050611e69565b808201805167ffffffffffffffff811115611e345750505050611e69565b80602083010160043d038501811115611e51575050505050611e69565b611e6082602001850186611dab565b82955050505050505b90565b6000604082019050611e816000830185611a79565b8181036020830152611e9381846117f7565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611ef86026836117ab565b9150611f0382611e9c565b604082019050919050565b60006020820190508181036000830152611f2781611eeb565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611f64601d836117ab565b9150611f6f82611f2e565b602082019050919050565b60006020820190508181036000830152611f9381611f57565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ff66025836117ab565b915061200182611f9a565b604082019050919050565b6000602082019050818103600083015261202581611fe9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006120886023836117ab565b91506120938261202c565b604082019050919050565b600060208201905081810360008301526120b78161207b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061211a6026836117ab565b9150612125826120be565b604082019050919050565b600060208201905081810360008301526121498161210d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006121ac6024836117ab565b91506121b782612150565b604082019050919050565b600060208201905081810360008301526121db8161219f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061223e6022836117ab565b9150612249826121e2565b604082019050919050565b6000602082019050818103600083015261226d81612231565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006122d06021836117ab565b91506122db82612274565b604082019050919050565b600060208201905081810360008301526122ff816122c3565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006123626022836117ab565b915061236d82612306565b604082019050919050565b6000602082019050818103600083015261239181612355565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123ce6020836117ab565b91506123d982612398565b602082019050919050565b600060208201905081810360008301526123fd816123c1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061243a601f836117ab565b915061244582612404565b602082019050919050565b600060208201905081810360008301526124698161242d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006124aa826118bf565b91506124b5836118bf565b92508282026124c3816118bf565b915082820484148315176124da576124d9611b43565b5b509291505056fea264697066735822122035cfe22cb25e4d606a71b80b3c554d0eab047b60db49a605e348b8e2e54e618164736f6c634300081b0033",
  "devdoc": {
    "details": "ERC20 token with burnable, ownable, and reentrancy guard features.Integrated with BasescanCheck for contract verification check.",
    "errors": {
      "InsufficientContractBalance()": [
        {
          "details": "Custom error when the contract balance is insufficient for verification requests"
        }
      ],
      "VerificationNotChecked()": [
        {
          "details": "Custom error when a contract is attempted to be used before verification"
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "CheckRequestFailed(address,string)": {
        "params": {
          "contractAddress": "The address of the contract for which the request failed",
          "errorMessage": "Error message describing why the request failed"
        }
      },
      "CheckRequestSent(address)": {
        "params": {
          "contractAddress": "The address of the contract to be checked"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "params": {
          "amount": "The number of tokens to approve for spending",
          "spender": "The address to which tokens are allowed to be spent"
        },
        "returns": {
          "_0": "bool indicating success or failure"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "checkVerification(address)": {
        "details": "This function sends a request to the BasescanCheck contract via the IBasescanCheck interface. It checks whether the contract has enough Ether balance (>= 0.002 ether) to pay for the request. If the request succeeds, the contract address is marked as checked, and an event is emitted. In case of failure, it emits an event with the error message.  Requirements: - The contract must have at least 0.002 ether in balance to cover the request. - The function is protected against reentrancy using the `nonReentrant` modifier.  Emits: - `CheckRequestSent` if the verification request is successfully sent. - `CheckRequestFailed` if the verification request fails, along with the error message. ",
        "params": {
          "contractAddress": "The address of the contract to verify."
        }
      },
      "constructor": {
        "details": "The constructor initializes the ERC20 token with the name \"Scam Hunter Token\" and symbol \"SHT\". It also sets the deployer as the owner of the contract by calling the Ownable constructor, and initializes the  BasescanCheck contract address for performing contract verification checks. ",
        "params": {
          "basescanCheckAddress": "The address of the BasescanCheck contract used for verification requests."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "params": {
          "receiver": "The address to send the Ether to"
        }
      }
    },
    "stateVariables": {
      "basescanCheck": {
        "details": "Chainlink-based contract for AI-driven verification requests"
      },
      "isContractChecked": {
        "details": "Mapping to track whether a contract verification has been checked or not"
      }
    },
    "title": "ScamHunterToken",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CheckRequestFailed(address,string)": {
        "notice": "Emitted when a verification request fails"
      },
      "CheckRequestSent(address)": {
        "notice": "Emitted when a request to check a contract verification is sent"
      }
    },
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approves an allowance for a spender, only if the contract verification is checked.  After verification check, it's up to the user to approve even though the contract is not a verified on Basescan."
      },
      "checkVerification(address)": {
        "notice": "Checks a given smart contract verification on Basescan using BasescanCheck by sending a verification request."
      },
      "constructor": {
        "notice": "Constructor to deploy the ScamHunterToken contract."
      },
      "withdraw(address)": {
        "notice": "Allows the contract owner to withdraw the contract's Ether balance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 182,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 188,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 190,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 192,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 194,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 947,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "basescanCheck",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBasescanCheck)1299"
      },
      {
        "astId": 952,
        "contract": "contracts/ScamHunterToken.sol:ScamHunterToken",
        "label": "isContractChecked",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBasescanCheck)1299": {
        "encoding": "inplace",
        "label": "contract IBasescanCheck",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}